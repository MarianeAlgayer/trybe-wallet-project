{"version":3,"sources":["services/API.js","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","components/Input/index.js","components/Button/index.js","pages/Login/index.js","components/WalletHeader/index.js","utils/constants.js","components/Select/index.js","components/WalletForm/index.js","components/WalletTable/index.js","pages/Wallet/index.js","App.js","serviceWorker.js","index.js"],"names":["fetchExchangeRates","a","fetch","response","json","data","USDT","login","email","type","saveExpense","expense","deleteExpense","id","fetchCurrencies","dispatch","then","dataAPI","currencies","Object","keys","filter","key","saveExpenceWithExchangeRates","exchangeRates","expenceWithExchangeRates","INITIAL_STATE","userReducer","state","action","expenses","walletReducer","rootReducer","combineReducers","user","wallet","store","createStore","composeWithDevTools","applyMiddleware","thunk","Input","testId","label","value","name","onChange","htmlFor","data-testid","Button","onClick","isBtnDisabled","disabled","defaultProps","Login","password","handleChange","target","setState","validateForm","handleClick","props","history","push","validEmail","test","validPassword","length","this","className","React","Component","connect","WalletHeader","getTotalValue","map","currency","ask","reduce","result","number","toFixed","HEADERS","CATEGORIES_OPTIONS","PAYMENT_OPTIONS","Select","options","option","WalletForm","method","tag","description","expenseObj","c","WalletTable","handleDeleteBtn","header","currencyName","exchangeRate","Number","convertedValue","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb7c04a1.chunk.js","sourcesContent":["const fetchExchangeRates = async () => {\n  const url = 'https://economia.awesomeapi.com.br/json/all';\n\n  const response = await fetch(url);\n  const data = await response.json();\n  delete data.USDT;\n  return data;\n};\n\nexport default fetchExchangeRates;\n","import fetchExchangeRates from '../services/API';\n\nexport const LOGIN = 'LOGIN';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const login = (email) => ({\n  type: LOGIN,\n  email,\n});\n\nconst getCurrencies = (currencies) => ({\n  type: GET_CURRENCIES,\n  currencies,\n});\n\nconst saveExpense = (expense) => ({\n  type: SAVE_EXPENSE,\n  expense,\n});\n\nexport const deleteExpense = (id) => ({\n  type: DELETE_EXPENSE,\n  id,\n});\n\nconst filterUSDT = (dataAPI) => Object.keys(dataAPI).filter((key) => key !== 'USDT');\n\nexport const fetchCurrencies = () => (dispatch) => fetch('https://economia.awesomeapi.com.br/json/all')\n  .then((response) => response.json())\n  .then((data) => dispatch(getCurrencies(filterUSDT(data))));\n\nexport const saveExpenceWithExchangeRates = (expense) => async (dispatch) => {\n  const exchangeRates = await fetchExchangeRates();\n  const expenceWithExchangeRates = {\n    ...expense,\n    exchangeRates,\n  };\n  dispatch(saveExpense(expenceWithExchangeRates));\n};\n","import { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { SAVE_EXPENSE, DELETE_EXPENSE, GET_CURRENCIES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        action.expense,\n      ],\n    };\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.id),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Input = ({ id, testId, label, type, value, name, onChange }) => (\n  <label htmlFor={ id }>\n    {' '}\n    {label}\n    {' '}\n    <input\n      id={ id }\n      data-testid={ testId }\n      type={ type }\n      value={ value }\n      name={ name }\n      onChange={ onChange }\n    />\n  </label>\n);\n\nInput.propTypes = {\n  id: PropTypes.string,\n  testId: PropTypes.string,\n  label: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n}.isRequired;\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick, label, isBtnDisabled }) => (\n  <button\n    type=\"button\"\n    disabled={ isBtnDisabled }\n    onClick={ onClick }\n  >\n    {' '}\n    {label}\n    {' '}\n  </button>\n);\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  isBtnDisabled: PropTypes.bool,\n};\n\nButton.defaultProps = { isBtnDisabled: false };\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { login } from '../../actions';\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\n\nimport './style.css';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    isBtnDisabled: true,\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, this.validateForm);\n  }\n\n  handleClick = () => {\n    const { dispatch, history } = this.props;\n    const { email } = this.state;\n\n    dispatch(login(email));\n    history.push('/carteira');\n  }\n\n  // source: https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n  validateForm = () => {\n    const { email, password } = this.state;\n\n    const emailRegex = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+(\\.[a-z]+)?$/i;\n    const minLength = 6;\n\n    const validEmail = emailRegex.test(email);\n    const validPassword = password.length >= minLength;\n\n    if (validEmail && validPassword) {\n      return this.setState({\n        isBtnDisabled: false,\n      });\n    }\n\n    return this.setState({\n      isBtnDisabled: true,\n    });\n  }\n\n  render() {\n    const { email, password, isBtnDisabled } = this.state;\n\n    return (\n      <div className=\"login-container\">\n        <form className=\"login-form\">\n          <h1>Trybe Wallet</h1>\n\n          <Input\n            id=\"email\"\n            data-testid=\"email-input\"\n            label=\"Email:\"\n            type=\"email\"\n            value={ email }\n            name=\"email\"\n            onChange={ this.handleChange }\n          />\n\n          <Input\n            id=\"password\"\n            data-testid=\"password-input\"\n            label=\"Senha:\"\n            type=\"password\"\n            value={ password }\n            name=\"password\"\n            onChange={ this.handleChange }\n          />\n\n          <Button\n            label=\"ENTRAR\"\n            isBtnDisabled={ isBtnDisabled }\n            onClick={ this.handleClick }\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect()(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass WalletHeader extends React.Component {\n  getTotalValue = () => {\n    const { expenses } = this.props;\n    const initialValue = 0;\n\n    if (expenses.length > 0) {\n      const convertedValues = expenses\n        .map(({ value, exchangeRates, currency }) => value * exchangeRates[currency].ask);\n\n      const totalValue = convertedValues.reduce((result, number) => result + number);\n\n      return totalValue.toFixed(2);\n    }\n\n    return initialValue.toFixed(2);\n  };\n\n  render() {\n    const { email } = this.props;\n\n    return (\n      <header>\n        <h1>Trybe Wallet</h1>\n\n        <div>\n          <p data-testid=\"email-field\">{`E-mail: ${email}`}</p>\n          <p data-testid=\"total-field\">{`R$ ${this.getTotalValue()}`}</p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nWalletHeader.propTypes = {\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n}.isRequired;\n\nexport default connect(mapStateToProps)(WalletHeader);\n","export const HEADERS = [\n  'Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda', 'Câmbio utilizado',\n  'Valor convertido', 'Moeda de conversão', 'Excluir',\n];\n\nexport const CATEGORIES_OPTIONS = [\n  'Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde',\n];\n\nexport const PAYMENT_OPTIONS = [\n  'Dinheiro', 'Cartão de crédito', 'Cartão de débito',\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Select = ({ id, testId, label, value, name, onChange, options }) => (\n  <label htmlFor={ id }>\n    {' '}\n    {label}\n    {' '}\n    <select\n      id={ id }\n      data-testid={ testId }\n      value={ value }\n      name={ name }\n      onChange={ onChange }\n    >\n      { options.map((option) => <option key={ option }>{ option }</option>) }\n    </select>\n  </label>\n);\n\nSelect.propTypes = {\n  id: PropTypes.string,\n  testId: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  options: PropTypes.array,\n}.isRequired;\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { saveExpenceWithExchangeRates, fetchCurrencies } from '../../actions';\nimport { CATEGORIES_OPTIONS, PAYMENT_OPTIONS } from '../../utils/constants';\nimport Input from '../Input';\nimport Select from '../Select';\nimport Button from '../Button';\n\nconst initialTag = 'Alimentação';\n\nclass WalletForm extends React.Component {\n  state = {\n    value: 0,\n    currency: 'USD',\n    method: 'Dinheiro',\n    tag: initialTag,\n    description: '',\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchCurrencies());\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick = () => {\n    const { expenses, dispatch } = this.props;\n    const expenseObj = {\n      id: expenses.length,\n      ...this.state,\n    };\n\n    dispatch(saveExpenceWithExchangeRates(expenseObj));\n\n    this.setState({\n      value: 0,\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: initialTag,\n      description: '',\n    });\n  }\n\n  render() {\n    const { value, currency, method, tag, description } = this.state;\n    const { currencies } = this.props;\n\n    return (\n      <form className=\"wallet-form\">\n        <Input\n          id=\"value\"\n          data-testid=\"value-input\"\n          label=\"Valor:\"\n          type=\"number\"\n          value={ value }\n          name=\"value\"\n          onChange={ this.handleChange }\n        />\n\n        <Select\n          id=\"currency\"\n          data-testid=\"currency-input\"\n          label=\"Moeda:\"\n          value={ currency }\n          name=\"currency\"\n          onChange={ this.handleChange }\n          options={ currencies.filter((c) => c !== 'USDT') }\n        />\n\n        <Select\n          id=\"method\"\n          data-testid=\"method-input\"\n          label=\"Método de pagamento:\"\n          value={ method }\n          name=\"method\"\n          onChange={ this.handleChange }\n          options={ PAYMENT_OPTIONS }\n        />\n\n        <Select\n          id=\"tag\"\n          data-testid=\"tag-input\"\n          label=\"Categoria:\"\n          value={ tag }\n          name=\"tag\"\n          onChange={ this.handleChange }\n          options={ CATEGORIES_OPTIONS }\n        />\n\n        <Input\n          id=\"description\"\n          data-testid=\"description-input\"\n          label=\"Descrição:\"\n          type=\"text\"\n          value={ description }\n          name=\"description\"\n          onChange={ this.handleChange }\n        />\n\n        <Button\n          label=\"Adicionar despesa\"\n          onClick={ this.handleClick }\n        />\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies,\n});\n\nWalletForm.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps)(WalletForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { deleteExpense } from '../../actions';\nimport { HEADERS } from '../../utils/constants';\nimport Button from '../Button';\n\nclass WalletTable extends React.Component {\n  handleDeleteBtn = (id) => {\n    const { dispatch } = this.props;\n    dispatch(deleteExpense(id));\n  }\n\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <table className=\"wallet-table\">\n        <thead>\n          <tr>\n            { HEADERS.map((header) => <th key={ header }>{ header }</th>) }\n          </tr>\n        </thead>\n\n        <tbody>\n          { expenses.map(({\n            id, description, tag, method, value, currency, exchangeRates,\n          }) => {\n            const currencyName = exchangeRates[currency].name;\n            const exchangeRate = Number(exchangeRates[currency].ask).toFixed(2);\n            const convertedValue = Number(value * exchangeRates[currency].ask).toFixed(2);\n\n            return (\n              <tr key={ id }>\n                <td>{ description }</td>\n                <td>{ tag }</td>\n                <td>{ method }</td>\n                <td>{ Number(value).toFixed(2) }</td>\n                <td>{ currencyName }</td>\n                <td>{ exchangeRate }</td>\n                <td>{ convertedValue }</td>\n                <td>Real</td>\n                <td>\n                  <Button\n                    label=\"Excluir\"\n                    onClick={ () => this.handleDeleteBtn(id) }\n                  />\n                </td>\n              </tr>);\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nWalletTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps)(WalletTable);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport WalletHeader from '../../components/WalletHeader';\nimport WalletForm from '../../components/WalletForm';\nimport WalletTable from '../../components/WalletTable';\n\nimport './style.css';\n\nclass Wallet extends React.Component {\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <div className=\"wallet-container\">\n        <WalletHeader />\n        <WalletForm />\n        { expenses.length > 0 && <WalletTable />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}